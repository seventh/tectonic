= Tectonic

== Stratégie de génération

Ligne par ligne, colonne par colonne, une case à la fois (palier).

=== Exploitation des résultats intermédiaires

Un résultat notable est qu'avec la sauvegarde des paliers intermédiaires,
le palier 1+L×(H-1)×M du problème (L, H, M) est le mếme que pour tous les
problèmes (L, H+n, M) quelque soit n >= 0.

=== Limitation du contexte

La génération d'une nouvelle ligne n'est sensible qu'aux (M-1) lignes
précédentes. On peut même envisager une limitation plus drastique encore
en considérant la frontière constituée de polyominos pleins.

La définition de la frontière minimale est la suivante : c'est l'ensemble
des cases qui appartiennent à la même zone que les cases limitrophes d'au moins
une case qui n'a pas (encore) de *valeur* assignée.

Par exemple, dans :

+-+-+-+-+
|. . . .|
+ + + + +
|4|5|4 .|
+ +-+-+ +
|2|3 2|3|
+-+ +-+ +
|5 4|5 4|
+ +-+-+-+
|1|2 3 1|
+-+-+-+-+

la frontière est :

+-+-+-+-+
|. . . .|
+ + + + +
|4|5|4 .|
+ +-+-+ +
|2|3 2|3|
+-+ +-+ +
|5 4|5 4|
+ +-+-+-+
|1|… … …|
+-+-+-+-+

Ici, même la zone 1/5/4/3/2 en forme de M fait partie de la frontière, car le 2
à l'extrêmité est limitrophe d'une case indéterminée.

== Spécificité du format d'encodage

Le format d'encodage doit permettre de représenter :

* des grilles dont le découpage en zones est connu, mais pas toutes les valeurs.
C'est a priori le besoin premier, pour stocker des puzzles à résoudre ;
* des grilles dont le découpage en zones n'est pas totalement connu, ce qui est
utile pour le générateur de grilles, avec sauvegarde des étapes intermédiaires.

De plus, s'il permet de conserver des codes compacts alors que les cases non
encore générées sont inconnues, c'est bien aussi (évitons d'encoder des 0 pour
rien)

== Spécificité du format d'enregistrement

Pour être certain que l'enregistrement d'un palier est complet, il faut un
marqueur en fin de fichier dont la présence assure sans équivoque l'intégrité
de celui-ci. Cela peut-être :

* un code numérique qui ne représente pas un code valide au sens du format
d'encodage (e.g. -1)
* une chaîne de caractères spécifique (e.g. «FIN»).

Idéalement, il faut un marqueur :

* robuste au tri numérique du fichier, c'est-à-dire qui conserve sa place après
un tri.
* facilitant le traitement normal des codes (typiquement, un code numérique)

À savoir, lors d'un tri numérique, toute chaîne de caractères est interprétée
comme un nombre, et est donc estimé à «0» la plupart du temps.

== Transposition

Il est forcément intéressant de réutiliser les paliers (i.e. résultats
intermédiaires) précédemment atteints pour générer d'autres grilles. Au vu de
la stratégie de génération, qui génère ligne à ligne, il semble pertinent de
toujours favoriser la génération de grilles telles que H >= L, quitte à
intervertir les dimensions caractéristiques. Alors, une fois que l'on obtient
les grilles L×H, il ne reste plus qu'à les transposer une à une pour obtenir
les grilles H×L.

== Parallélisation des traitements

Afin d'accélérer les traitements, on cherche à les mener de front, en
parallèle. Il y a cependant quelques précautions à prendre.

La stratégie actuelle de génération de palier produit des doublons, du fait de
la fusion a posteriori de Régions encore distinctes au palier précédent. Cette
fusion est indispensable pour atteindre certaines Grilles qui ne peuvent pas
être obtenues d'une autre manière. C'est pourquoi la génération utilise un
`set` pour stocker les résultats, afin d'assurer ce dédoublonnage.

=== Dédoublonnage

Ce dédoublonnage est extrêmement coûteux en mémoire, à tel point que c'est
devenu le facteur limitant de la génération actuellement. Deux solutions pour
s'en passer :

1) Ne plus générer de doublon tout court. Cela consisterait à vérifier avant
d'envisager la fusion que la grille issue de la fusion mais sans ajout d'une
nouvelle valeur n'est pas déjà présente dans le palier précédent.
2) Différer le dédoublonnage. Produire toutes les grilles possibles avec
doublons, puis effectuer une passe de tri/dédoublonnage.

La recherche d'une grille déjà existante peut se faire par dichotomie dans le
palier précédent. À étudier.

Une autre façon de déterminer si on va générer un doublon, c'est de considérer
si les deux Régions à fusionner sont limitrophes. Si c'est bien le cas, une
autre version de la grille existe déjà avec ces régions ne formant qu'un.

=== Parallélisation

Le foisonnement d'un palier à l'autre n'est pas constant. Les premiers paliers
multiplient le nombre de grilles par environ  M. Puis, en fonction des
dimensions de la grille, les contraintes de placement viennent limiter ce
foisonnement. Le dernier palier vient résoudre toutes les contraintes et
présente généralement un foisonnement inférieur à l'unité.

Une forme scalable de parallélisation pourrait être de générer en traitant des
lots de grilles d'un palier donné.

Imaginons, à un moment donné, il y a :
- 122 grilles du palier 3 qui n'ont pas encore été traitées pour génération ;
- 643 grilles du palier 4… ;
- 12 grilles du palier 5.

On considère qu'il n'est pas efficace de traiter un lot de moins 100 grilles à
la fois. Ce qui fait qu'on a, de prêt :
- 1 lot pour la conversion 3→4
- 6 lots pour la conversion 4→5
- 0 lot pour la conversion 5→6

À partir de là, on peut considérer différentes stratégies :
* traiter en priorité la génération des paliers bas, pour minimiser le nombre
de paliers gérés simultanément ;
* traiter en priorité la génération des paliers hauts, pour obtenir des
résultats rapidement ;
* traiter les lots par ordre d'arrivée.

On peut également décider de n'avoir qu'un générateur par palier, ou au
contraire, plusieurs. Pour l'arrêt intempestif du programme, ça peut avoir son
importance.

==== Contexte à mémoriser

Toutes les stratégies de parallélisation doivent pouvoir s'appuyer sur la même
formalisation de la progression, qui doit ressembler à quelque chose comme:

  palier → (nb, nb_lus)

La mise-à-jour de ce contexte diffère en fonction des résultats sauvegardés sur
disque, ou pas encore. Sur disque, le contexte est enregistré par flip-flop.

D'un palier, je consomme un nouveau lot pour le confier à un étage de
génération : en mémoire, nb_lus[palier] += 100
Je reçois le résultat de la génération, mais ce n'est pas le prochain résultat
attendu : je mémorise.
Je reçois le résultat de la génération, et ce résultat est bien le suivant qui
était attendu : j'écris sur disque
- les lots en attente dans le fichier de palier correspondant (fichier PALIER)
- nb_lus[palier-1] += 100 et nb[palier] += taille du lot (fichier CONTEXTE)

Si pour un palier donné, trop de lots sont en attente, plus aucun lot n'est
émis pour aucun palier, histoire de favoriser la resynchronisation, et éviter
de perdre des résultats intermédiaires.

==== Parallélisation sans perte

Qu'appelle-t-on une perte ? Le fait de ne pas avoir les grilles du palier
suivant qui sont issues de l'expansion de grilles du palier courant.

1. Le client demande un lot. Le serveur mémorise dans un fichier F
l'attribution du lot, par l'ajout d'une ligne caractéristique.
2. Le client (finit par) renvoyer les grilles correspondantes à l'étude du lot
fourni.
3. Le serveur enregistre les réponses fournies dans un fichier dédié.
4. Le serveur ajoute une ligne dans le fichier F indiquant que le lot est
traité.

Tant que l'étape n°4 n'est pas finalisée, le lot de l'étape n°1 n'est pas
traîté.

Les fichiers de l'étape n°3 considérés valides sont ceux qui ont identifiés
par les actions de l'étape n°4.

== Stockage

Rappel : un puzzle est l'association d'une grille complétée avec un masque.
Le joueur doit retrouver les valeurs masquées. La difficulté d'un puzzle n'est
pas lié à ses dimensions mais à la complexité des règles appliquées pour la
résolution.

On fait volontairement abstration des symétries possibles pour
une grille/un puzzle.

=== Stockage d'une grille

Une grille est la combinaison :
- de dimensions ;
- de valeurs pour les cases ;
- de blocs enchevêtrés pour regrouper ces valeurs (régions).

Le format de sérialisation actuel donne les deux informations simultanément
pour une grille donnée : valeur de case, et identifiant de région.

Avantages du format :
* Codage préfixe : le changement de dimensions ne modifie pas la valeur du code

Inconvénients du format :
* En ne distintinguant pas la structure (les régions) des valeurs, le format ne
facilite pas l'identification des structures communes, ou des séquences
communes pour les valeurs des cases.

Attention cependant, le codage est préfixe parce que la stratégie de génération
produit des valeurs dans le même ordre de leur désérialisation.

Si, à proprement parler, la valeur maximale n'est pas une donnée primordiale,
elle peut être exploitée pour un stockage plus efficace, comme le nombre de
régions par ailleurs.

=== Stockage d'un puzzle

Les informations liées à un puzzle sont restreintes :
* Identifiant de grille
* Masque binaire indiquant pour chaque case si elle est connue ou non
* Niveau de difficulté.

=== Stockage global

On peut imaginer une structure arborescente

data/
+ hXXlYY/
| + mZZ /
| | + palier-pUU.txt
| | + grilles.txt
| | + dTT.txt
